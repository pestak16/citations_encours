<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.5" xml:lang="en-US">
  <compounddef id="bootstrap80_8php" kind="file" language="PHP">
    <compoundname>bootstrap80.php</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal">&lt;?php</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>Symfony<sp/>package.</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>(c)<sp/>Fabien<sp/>Potencier<sp/>&lt;fabien@symfony.com&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>For<sp/>the<sp/>full<sp/>copyright<sp/>and<sp/>license<sp/>information,<sp/>please<sp/>view<sp/>the<sp/>LICENSE</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>file<sp/>that<sp/>was<sp/>distributed<sp/>with<sp/>this<sp/>source<sp/>code.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal">use<sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">Symfony\Polyfill\Mbstring</ref><sp/>as<sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_convert_encoding&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_convert_encoding(array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$to_encoding,<sp/>array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$from_encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>array|string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_convert_encoding($string<sp/>??<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/>(string)<sp/>$to_encoding,<sp/>$from_encoding);<sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal">}</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_decode_mimeheader&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_decode_mimeheader(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_decode_mimeheader((string)<sp/>$string);<sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_encode_mimeheader&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_encode_mimeheader(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$charset<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$transfer_encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$newline<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\r\n&quot;</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$indent<sp/>=<sp/>0):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_encode_mimeheader((string)<sp/>$string,<sp/>$charset,<sp/>$transfer_encoding,<sp/>(string)<sp/>$newline,<sp/>(int)<sp/>$indent);<sp/>}</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_decode_numericentity&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_decode_numericentity(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>array<sp/>$map,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_decode_numericentity((string)<sp/>$string,<sp/>$map,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_encode_numericentity&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_encode_numericentity(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>array<sp/>$map,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$hex<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_encode_numericentity((string)<sp/>$string,<sp/>$map,<sp/>$encoding,<sp/>(bool)<sp/>$hex);<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_convert_case&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_convert_case(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$mode,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_convert_case((string)<sp/>$string,<sp/>(int)<sp/>$mode,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_internal_encoding&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_internal_encoding(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_internal_encoding($encoding);<sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_language&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_language(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$language<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_language($language);<sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_list_encodings&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_list_encodings():<sp/>array<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_list_encodings();<sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_encoding_aliases&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_encoding_aliases(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding):<sp/>array<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_encoding_aliases((string)<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_check_encoding&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_check_encoding(array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$value<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_check_encoding($value,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_detect_encoding&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_detect_encoding(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$encodings<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$strict<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_detect_encoding((string)<sp/>$string,<sp/>$encodings,<sp/>(bool)<sp/>$strict);<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_detect_order&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_detect_order(array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>array|bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_detect_order($encoding);<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_parse_str&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_parse_str(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>&amp;$result<sp/>=<sp/>[]):<sp/>bool<sp/>{<sp/>parse_str((string)<sp/>$string,<sp/>$result);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>$result;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strlen&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strlen(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strlen((string)<sp/>$string,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strpos&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strpos(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$offset<sp/>=<sp/>0,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strpos((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(int)<sp/>$offset,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strtolower&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strtolower(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strtolower((string)<sp/>$string,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strtoupper&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strtoupper(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strtoupper((string)<sp/>$string,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_substitute_character&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_substitute_character(</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$substitute_character<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|int|bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_substitute_character($substitute_character);<sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_substr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_substr(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$start,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$length<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_substr((string)<sp/>$string,<sp/>(int)<sp/>$start,<sp/>$length,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_stripos&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_stripos(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$offset<sp/>=<sp/>0,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_stripos((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(int)<sp/>$offset,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_stristr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_stristr(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$before_needle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_stristr((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(bool)<sp/>$before_needle,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strrchr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strrchr(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$before_needle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strrchr((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(bool)<sp/>$before_needle,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strrichr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strrichr(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$before_needle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strrichr((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(bool)<sp/>$before_needle,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal">}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strripos&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strripos(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$offset<sp/>=<sp/>0,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strripos((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(int)<sp/>$offset,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strrpos&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strrpos(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$offset<sp/>=<sp/>0,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strrpos((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(int)<sp/>$offset,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strstr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strstr(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>$before_needle<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strstr((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>(bool)<sp/>$before_needle,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal">}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_get_info&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_get_info(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$type<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;all&apos;</highlight><highlight class="normal">):<sp/>array|string|int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_get_info((string)<sp/>$type);<sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_http_output&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_http_output(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|bool<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_http_output($encoding);<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_strwidth&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_strwidth(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_strwidth((string)<sp/>$string,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_substr_count&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_substr_count(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$haystack,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$needle,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_substr_count((string)<sp/>$haystack,<sp/>(string)<sp/>$needle,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_output_handler&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_output_handler(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$status):<sp/>string<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_output_handler((string)<sp/>$string,<sp/>(int)<sp/>$status);<sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_http_input&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_http_input(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$type<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>array|string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_http_input($type);<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_convert_variables&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_convert_variables(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$to_encoding,<sp/>array|</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">|</highlight><highlight class="keyword">null</highlight><highlight class="normal"><sp/>$from_encoding,<sp/>mixed<sp/>&amp;$var,<sp/>mixed<sp/>&amp;...$vars):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_convert_variables((string)<sp/>$to_encoding,<sp/>$from_encoding<sp/>??<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">,<sp/><ref refid="namespace_symfony_1_1_component_1_1_var_dumper_1_1_tests_1_1_fixture_1a9184c9cf1f1e58b87296500a3c3a9291" kindref="member">$var</ref>,<sp/>...$vars);<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_ord&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_ord(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>int|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_ord((string)<sp/>$string,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_chr&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_chr(?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$codepoint,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string|false<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_chr((int)<sp/>$codepoint,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_scrub&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_scrub(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>string<sp/>{<sp/>$encoding<sp/>??=<sp/>mb_internal_encoding();<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mb_convert_encoding((</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">)<sp/>$string,<sp/>$encoding,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!function_exists(</highlight><highlight class="stringliteral">&apos;mb_str_split&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>mb_str_split(?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$string,<sp/>?</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>$length<sp/>=<sp/>1,<sp/>?</highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>$encoding<sp/>=<sp/></highlight><highlight class="keyword">null</highlight><highlight class="normal">):<sp/>array<sp/>{<sp/><ref refid="title_case_regexp_8php_1a9717e7bbecb906637e86cef6da3d83c2" kindref="member">return</ref><sp/><ref refid="namespace_symfony_1_1_polyfill_1_1_mbstring" kindref="compound">p</ref>\Mbstring::mb_str_split((string)<sp/>$string,<sp/>(int)<sp/>$length,<sp/>$encoding);<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(extension_loaded(</highlight><highlight class="stringliteral">&apos;mbstring&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defined(</highlight><highlight class="stringliteral">&apos;MB_CASE_UPPER&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>define(</highlight><highlight class="stringliteral">&apos;MB_CASE_UPPER&apos;</highlight><highlight class="normal">,<sp/>0);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defined(</highlight><highlight class="stringliteral">&apos;MB_CASE_LOWER&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>define(</highlight><highlight class="stringliteral">&apos;MB_CASE_LOWER&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!defined(</highlight><highlight class="stringliteral">&apos;MB_CASE_TITLE&apos;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>define(</highlight><highlight class="stringliteral">&apos;MB_CASE_TITLE&apos;</highlight><highlight class="normal">,<sp/>2);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/wamp64/www/citations_encours/src/vendor/symfony/polyfill-mbstring/bootstrap80.php"/>
  </compounddef>
</doxygen>
